import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

class BinaryTreeNode<T> {
	T data;
	BinaryTreeNode<T> left;
	BinaryTreeNode<T> right;

	public BinaryTreeNode(T data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class Pair {
	int[] postOrder;
	int[] inOrder;

	public Pair(int[] postOrder, int[] inOrder) {
		this.postOrder = postOrder;
		this.inOrder = inOrder;
	}

}

public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    private static Pair takeInput() throws NumberFormatException, IOException {
    	int n = Integer.parseInt(br.readLine().trim());

    	int pre[] = new int[n];
    	int in[] = new int[n];

    	String[] postOrder = br.readLine().trim().split(" ");
    	String[] inOrder = br.readLine().trim().split(" ");


    	for (int i = 0; i < n; i++) {
    		pre[i] = Integer.parseInt(postOrder[i].trim());
    		in[i] = Integer.parseInt(inOrder[i].trim());
    	}

    	return new Pair(pre, in);

    }

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		
		Queue<BinaryTreeNode<Integer>> pendingNodes = new LinkedList<>();
		pendingNodes.add(root);
        pendingNodes.add(null);

		while(!pendingNodes.isEmpty()) {
			BinaryTreeNode<Integer> frontNode = pendingNodes.poll();

        
	        if (frontNode == null) {
	            System.out.println();

	            if (!pendingNodes.isEmpty()) {
	                pendingNodes.add(null);
	            }

	        } else {
	        	System.out.print(frontNode.data + " ");

	            if (frontNode.left != null) {
	                pendingNodes.add(frontNode.left);
	            } 

	            if (frontNode.right != null) {
	                pendingNodes.add(frontNode.right);
	            } 
	        }

		}
		
	}
    public static void main(String[] args) throws NumberFormatException, IOException {

    	Pair input = takeInput();

    	int[] postOrder = input.postOrder;
    	int[] inOrder = input.inOrder;

    	BinaryTreeNode<Integer> root = buildTree(postOrder, inOrder);

    	printLevelWise(root);

    }
	public static BinaryTreeNode<Integer> Tree(int[] postOrder,int[] inOrder,int pstart,int pend,int istart,int iend)
	{
		int n=inOrder.length-1;
		if(istart>iend||pstart>pend)
		{
			return null;
		}
      BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(postOrder[pend]);
	 int i=istart;
	 while (postOrder[pend]!=inOrder[i])
	{
       i++;
	}
	int colst=i-istart;
    root.left=Tree(postOrder,inOrder,pstart,pstart+colst-1,istart,i-1);
	root.right=Tree(postOrder,inOrder,pstart+colst,pend-1,i+1,iend);
	return root;
	}



	public static BinaryTreeNode<Integer> buildTree(int[] postOrder, int[] inOrder) {
		int n=postOrder.length;
		return Tree(postOrder,inOrder,0,n-1,0,n-1);
	}

}
